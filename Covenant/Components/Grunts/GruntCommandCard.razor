@inherits OwningComponentBase<ICovenantService>
@implements IDisposable

@using System.IO
@using Microsoft.JSInterop

@using Covenant.Core
@using Covenant.Models.Grunts
@using Covenant.Models.Covenant
@inject INotificationService INotificationService
@inject IJSRuntime IJSRuntime

<div class="card task-card interact-style interact-border w-100" id="tasking-card-@GruntCommand.Id">
    <div class="d-flex flex-row">
        <div class="col-auto p-0">
            <a class="expand-button p-0" type="button" @onclick="OnToggle">
                @if (this.IsMinimized)
                {
                    <span class="fe fe-plus text-muted font-weight-bold"></span>
                }
                else
                {
                    <span class="fe fe-minus text-muted font-weight-bold"></span>
                }
            </a>
        </div>
        <div class="col-auto pl-0 pr-2">
            @if (GruntCommand.GruntTasking == null)
            {
                <p class="terminal-highlight-color task-text-head">[@GruntCommand.CommandTime UTC] Command submitted</p>
            }
            else
            {
                <p class="terminal-highlight-color task-text-head">[@GruntCommand.CommandTime UTC] @GruntCommand.GruntTasking.GruntTask.Name @GruntCommand.GruntTasking.Status.ToString().ToLower()</p>
            }
            <p class="terminal-text-color task-text-body">(<b>@GruntCommand.User.UserName</b>) > @GruntCommand.Command</p>
        </div>
    </div>

    <div class="align-self-end">
        <a class="xbutton p-0" type="button" @onclick="(async item => await OnCopyOutput(GruntCommand))">
            <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-clipboard-copy"><rect width="8" height="4" x="8" y="2" rx="1" ry="1" /><path d="M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-2" /><path d="M16 4h2a2 2 0 0 1 2 2v4" /><path d="M21 14H11" /><path d="m15 10-4 4 4 4" /></svg>
        </a>
    </div>
    <div class="card-header p-0 border-top-0 border-bottom-0" id="tasking-header-@GruntCommand.Id"></div>
    @if (!this.IsMinimized)
    {
        <div class="card-body interact-style">
            @if (GruntCommand.GruntTasking != null && GruntCommand.GruntTasking.GruntTask != null && GruntCommand.GruntTasking.GruntTask.Name == "ScreenShot")
            {
                ScreenshotEvent screenshot = GetScreenshotEvent(GruntCommand);
                string content = screenshot != null ? GetScreenshotContent(screenshot) : string.Empty;
                if (GruntCommand.GruntTasking.Status == GruntTaskingStatus.Progressed)
                {<p class="terminal-text-color task-text-body" style="white-space:pre-wrap">Downloading screenshot... @screenshot.FileLength bytes</p>}
                else if (GruntCommand.GruntTasking.Status == GruntTaskingStatus.Completed)
                {<img style="max-width: 100%" src="data:image/png;base64, @content" />}
            }
            else if (GruntCommand.GruntTasking != null && GruntCommand.GruntTasking.GruntTask != null && GruntCommand.GruntTasking.GruntTask.Name == "Download")
            {
                DownloadEvent download = GetDownloadEvent(GruntCommand);
                if (GruntCommand.GruntTasking.Status == GruntTaskingStatus.Progressed)
                {<p class="terminal-text-color task-text-body" style="white-space:pre-wrap">Downloading... @download.FileLength bytes</p>}
                else if (GruntCommand.GruntTasking.Status == GruntTaskingStatus.Completed)
                {<p class="text-white task-text-body" style="white-space:pre-wrap">Download completed: @if (download != null){<a type="button" class="btn btn-link text-white task-text-body" download href="/api/events/download/@download.Id/download">@download.FileName</a>}</p>}
            }
             else if (GruntCommand.GruntTasking != null && GruntCommand.GruntTasking.GruntTask != null && GruntCommand.GruntTasking.GruntTask.Name == "Chrome_passwords")
                {
                    if (GruntCommand.GruntTasking.Status == GruntTaskingStatus.Progressed)
                    {
                        <p class="terminal-text-color task-text-body" style="white-space:pre-wrap">Decrypting... </p>
                    }
                    else if (GruntCommand.GruntTasking.Status == GruntTaskingStatus.Completed)
                    {
                        DecryptEvent decryptEvent = GetDecryptEvent(GruntCommand).WaitResult();
                        <p class="text-white task-text-body" style="white-space:pre-wrap">Decrypted : @if (decryptEvent != null)
                            {
                                 <p class="terminal-text-color task-text-body" style="white-space:pre-wrap">@decryptEvent.DecryptedOutput</p>
                            }
                         </p>
                    }
                }
                
            else if (GruntCommand.CommandOutput != null)
            {
                <p class="terminal-text-color task-text-body" style="white-space:pre-wrap">@GruntCommand.CommandOutput.Output</p>
            }
            else
            {
                <p class="terminal-text-color task-text-body" style="white-space:pre-wrap"></p>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public int GruntCommandId { get; set; }
    private GruntCommand GruntCommand { get; set; }

    [Parameter]
    public bool IsMinimized { get; set; } = true;

    private object _serviceLock = new object();

    protected override void OnInitialized()
    {
        lock (_serviceLock)
        {
            this.GruntCommand = Service.GetGruntCommand(this.GruntCommandId).WaitResult();
            this.GruntCommand.CommandOutput ??= Service.GetCommandOutput(this.GruntCommand.CommandOutputId).WaitResult();
            Service.DisposeContext();
        }
        this.INotificationService.OnEditGruntCommand += OnEditGruntCommand;
        this.INotificationService.OnEditCommandOutput += OnEditCommandOutput;
        this.INotificationService.OnEditGruntTasking += OnEditGruntTasking;
    }

    public void Dispose()
    {
        this.INotificationService.OnEditGruntCommand -= OnEditGruntCommand;
        this.INotificationService.OnEditCommandOutput -= OnEditCommandOutput;
        this.INotificationService.OnEditGruntTasking -= OnEditGruntTasking;
    }

    private async void OnEditCommandOutput(object sender, CommandOutput commandOutput)
    {
        if (this.GruntCommand.CommandOutput != null && this.GruntCommand.CommandOutput.Id == commandOutput.Id)
        {
            lock (_serviceLock)
            {
                this.GruntCommand = Service.GetGruntCommand(this.GruntCommandId).WaitResult();
                Service.DisposeContext();
                this.GruntCommand.CommandOutput ??= Service.GetCommandOutput(this.GruntCommand.CommandOutputId).WaitResult();
                Service.DisposeContext();
            }
            await this.InvokeAsync(() => this.StateHasChanged());
        }
    }

    private async void OnEditGruntCommand(object sender, GruntCommand gruntCommand)
    {
        if (this.GruntCommandId == gruntCommand.Id)
        {
            lock (_serviceLock)
            {
                this.GruntCommand = Service.GetGruntCommand(this.GruntCommandId).WaitResult();
                Service.DisposeContext();
                this.GruntCommand.CommandOutput ??= Service.GetCommandOutput(this.GruntCommand.CommandOutputId).WaitResult();
                Service.DisposeContext();
            }
            await this.InvokeAsync(() => this.StateHasChanged());
        }
    }

    private async void OnEditGruntTasking(object sender, GruntTasking gruntTasking)
    {
        if (this.GruntCommand.GruntTasking != null && this.GruntCommand.GruntTasking.Id == gruntTasking.Id)
        {
            lock (_serviceLock)
            {
                this.GruntCommand = Service.GetGruntCommand(this.GruntCommandId).WaitResult();
                Service.DisposeContext();
                this.GruntCommand.CommandOutput ??= Service.GetCommandOutput(this.GruntCommand.CommandOutputId).WaitResult();
                Service.DisposeContext();
            }
            await this.InvokeAsync(() => this.StateHasChanged());
        }
    }

    private void OnToggle()
    {
        if (this.IsMinimized && this.GruntCommand.CommandOutput == null)
        {
            lock (_serviceLock)
            {
                this.GruntCommand = Service.GetGruntCommand(this.GruntCommand.Id).WaitResult();
                Service.DisposeContext();
            }
        }
        this.IsMinimized = !IsMinimized;
    }

    private DownloadEvent GetDownloadEvent(GruntCommand command)
    {
        try
        {
            lock (_serviceLock)
            {
                DownloadEvent ev = Service.GetDownloadEventByGruntCommand(command.Id).WaitResult();
                Service.DisposeContext();
                return ev;
            }
        }
       catch { return null; }
    }

    private async Task<DecryptEvent> GetDecryptEvent(GruntCommand command)
    {

        //try
        //{
        //    lock (_serviceLock)
        //    {
        //        DecryptEvent ev = Service.GetDecryptEventByGruntCommand(command.Id).WaitResult();
        //        Service.DisposeContext();
        //        return ev;
        //    }
        //}
        //catch { return null; }

        DecryptEvent dec = new DecryptEvent();

        dec.EncryptedOutput = command.CommandOutput.Output;
        dec.Decrypt();
        return dec;
    }

    private ScreenshotEvent GetScreenshotEvent(GruntCommand command)
    {
        try
        {
            lock (_serviceLock)
            {
                ScreenshotEvent ev = Service.GetScreenshotEventByGruntCommand(command.Id).WaitResult();
                Service.DisposeContext();
                return ev;
            }
        }
        catch { return null; }
    }

    private string GetScreenshotContent(ScreenshotEvent ev)
    {
        using FileStream fs = ev.ReadDownload();
        if (fs != null)
        {
            using MemoryStream ms = new MemoryStream();
            fs.CopyTo(ms);
            return Convert.ToBase64String(ms.ToArray());
        }
        return "";
    }

    private async Task OnCopyOutput(GruntCommand command)
    {
         await IJSRuntime.InvokeAsync<string>("CopyToClipboard", command.CommandOutput.Output);
    }
}
